# -*- mode: org; -*-
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/readtheorg/css/htmlize.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/readtheorg/css/readtheorg.css"/>
#+HTML_HEAD: <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
#+HTML_HEAD: <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/lib/js/jquery.stickytableheaders.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/readtheorg/js/readtheorg.js"></script>

#+AUTHOR: Anthony Kalaitzis
#+TITLE: Emacs Config file

* Use Package

Load Use package in
#+BEGIN_SRC emacs-lisp
  ;; This is only needed once, near the top of the file
  (eval-when-compile
    ;; Following line is not needed if use-package.el is in ~/.emacs.d
    (add-to-list 'load-path "/home/anthony/.emacs.d/elpa/use-package-20180715.1801")
    (require 'use-package))
#+END_SRC

Ensure that main packages are loaded in
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t)
  (use-package auto-package-update
    :ensure t)
  (use-package tex
    :ensure auctex)
  ;; (use-package exec-path-from-shell
  ;;   :ensure t)
  (use-package julia-mode
    :ensure t)
  (use-package julia-shell
    :ensure t)
  (use-package org-bullets
    :ensure t)
  (use-package rainbow-mode
    :ensure t)
  (use-package wolfram
    :ensure t)
  (use-package better-defaults
    :ensure t)
  (use-package pdf-tools
    :ensure t)
  (use-package rainbow-delimiters
    :ensure t)
  (use-package helm
    :ensure t)
  (use-package flyspell
    :ensure t)
  (use-package flycheck
    :ensure t)
  (use-package htmlize
    :ensure t)
  (use-package org
    :ensure t)
  (use-package god-mode
    :ensure t)
  (use-package monokai-theme
    :ensure t)
#+END_SRC

* Emacs Utility
** Language 

Enable quick changed between English and 日本語
#+BEGIN_SRC emacs-lisp
  ;; (set-language-environment "Japanese")
#+END_SRC

Set encoding environment to UTF-8
#+BEGIN_SRC emacs-lisp
  (set-language-environment "UTF-8")
#+END_SRC

** Extra

Add custom abbrev definitions
#+BEGIN_SRC emacs-lisp
(setq abbrev-file-name "~/.abbrev_defs")
(if (file-exists-p abbrev-file-name)
    (quietly-read-abbrev-file))
#+END_SRC

Add some custom load paths
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/elpa/")
#+END_SRC

Toggle between splits
#+BEGIN_SRC emacs-lisp
  (defun window-split-toggle ()
  "Toggle between horizontal and vertical split with two windows."
  (interactive)
  (if (> (length (window-list)) 2)
      (error "Can't toggle with more than 2 windows!")
    (let ((func (if (window-full-height-p)
                    #'split-window-vertically
                  #'split-window-horizontally)))
      (delete-other-windows)
      (funcall func)
      (save-selected-window
        (other-window 1)
        (switch-to-buffer (other-buffer))))))
#+END_SRC

Auto refresh buffers without asking
#+BEGIN_SRC emacs-lisp
  (global-auto-revert-mode t)
#+END_SRC

Display column number
#+BEGIN_SRC emacs-lisp
   (setq column-number-mode t)
#+END_SRC

General comment header for any language
#+BEGIN_SRC emacs-lisp
  (defun my/general-comment-header (title)
  "Inserts a commented title"
  (interactive "sEnter a title: ")
  (defvar dash-len 1)
  (setq dash-len (/ (- 68 (length title)) 2))
  (insert comment-start)
  (indent-for-tab-command)
  (dotimes (ii dash-len)
    (insert "-"))
  (if (= (mod (length title) 2) 1)
      (insert "-")
    )
  (insert title)
  (dotimes (ii dash-len)
    (insert "-"))
  )
(global-set-key (kbd "H-t") 'my/general-comment-header)
#+END_SRC

set wolfram alpha ID
#+BEGIN_SRC emacs-lisp
(require 'wolfram)
(setq wolfram-alpha-app-id 'U2773W-V74GXV4HWX)
#+END_SRC 

* Beautification
** Accessibility
Change text size in Emacs
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil :height 150)
#+END_SRC

camelCase recognition
#+BEGIN_SRC emacs-lisp
(global-subword-mode)
#+END_SRC

Turn on rainbow deliminators 
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
#+END_SRC

** Start up

Auto full screen Emacs GUI
#+BEGIN_SRC emacs-lisp
(when (display-graphic-p)
  (add-to-list 'default-frame-alist '(fullscreen . maximized)))
#+END_SRC

Don't show scroll bar
#+BEGIN_SRC emacs-lisp
(tool-bar-mode 0)
(menu-bar-mode 0)
(when window-system
  (scroll-bar-mode -1))
#+END_SRC

turn off Emacs's annoying bell
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC

Fix Scrolling behaviour
#+BEGIN_SRC emacs-lisp
(setq scroll-conservatively 100)
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) 
(setq mouse-wheel-progressive-speed nil)
(setq mouse-wheel-follow-mouse 't) 
#+END_SRC

Remove start up message
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
(setq inhibit-startup-echo-area-message t)
#+END_SRC

Use better defaults for Emacs
#+BEGIN_SRC emacs-lisp
(require 'better-defaults)
#+END_SRC

** Display and Utility

Display time in mode line
#+BEGIN_SRC emacs-lisp
(setq display-time-string-forms '((propertize (format-time-string " %b %d, %l:%M%P" now) 'face'bold)))
(setq display-time-and-date t)
(display-time-mode 1)
#+END_SRC

Abbreviate all 'Yes/No' prompts to 'y/n'
#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Display line numbers in programming modes
#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+END_SRC

Mode line alterations
#+BEGIN_SRC emacs-lisp
(use-package spaceline
  :ensure spaceline
  :custom-face
  (spaceline-highlight-face ((t (:background "SeaGreen4" :foreground "#3E3D31" :inherit (quote mode-line)))))
  (spaceline-unmodified ((t (:background "SeaGreen4" :foreground "#3E3D31" :inherit (quote mode-line)))))
  (spaceline-read-only ((t (:background "DarkOliveGreen" :foreground "#3E3D31" :inherit (quote mode-line)))))
  :config
  (spaceline-emacs-theme)
  (setq spaceline-minor-modes-p nil)
  (setq spaceline-buffer-size-p nil)
  (setq spaceline-buffer-encoding-abbrev-p nil)
(setq spaceline-highlight-face-func 'spaceline-highlight-face-modified))
#+END_SRC
 
* Key Re-bindings
** File Navigation

Enable quick access to config file
#+BEGIN_SRC emacs-lisp
(defun my/visit-emacs-config ()
  (interactive)
  (find-file "~/.emacs.d/config.org"))
(global-set-key (kbd "H-e") 'my/visit-emacs-config)
#+END_SRC

File navigation for major files
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "H-r")  (lambda () (interactive) (find-file  "~/Dropbox/QMC/Thesis/MPhil_Research.tex")))
(global-set-key (kbd "H-T")  (lambda () (interactive) (find-file  "~/Dropbox/.texmf/tex/latex/package_repository/mypackage.sty")))
#+END_SRC

** Movement Macros

Move between buffers in same frame
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-]") 'other-window)
#+END_SRC

Move between buffers in different frames
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-[") 'other-frame)
#+END_SRC

Move in paragraphs
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-n") 'forward-paragraph)
(global-set-key (kbd "M-p") 'backward-paragraph)
#+END_SRC

ace window movement key bindings
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "H-]") 'ace-window)
(setq aw-keys '(?q ?w ?e ?a ?s ?d ?z ?x ?c))
#+END_SRC

** Personal Macros

Duplicate line
#+BEGIN_SRC emacs-lisp
(defun duplicate-current-line-or-region (arg)
  "Duplicates the current line or region ARG times.
If there's no region, the current line will be duplicated. However, if
there's a region, all lines that region covers will be duplicated."
  (interactive "p")
  (let (beg end (origin (point)))
    (if (and mark-active (> (point) (mark)))
        (exchange-point-and-mark))
    (setq beg (line-beginning-position))
    (if mark-active
        (exchange-point-and-mark))
    (setq end (line-end-position))
    (let ((region (buffer-substring-no-properties beg end)))
      (dotimes (i arg)
        (goto-char end)
        (newline)
        (insert region)
        (setq end (point)))
      (goto-char (+ origin (* (length region) arg) arg)))))
(global-set-key (kbd "H-D") 'duplicate-current-line-or-region)  
#+END_SRC

Open term in another window
#+BEGIN_SRC emacs-lisp
  (defun my/open-term-other-window ()
  (interactive)
  (let ((buf (term "/bin/bash")))
    (switch-to-buffer (other-buffer buf))
    (switch-to-buffer-other-window buf)))
(global-set-key (kbd "C-x 4 t") 'my/open-term-other-window)
#+END_SRC

Switch frame
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "H-f") 'window-split-toggle)
#+END_SRC

** Global coding macros

Repeat previous shell command
#+BEGIN_SRC emacs-lisp
(defun my/repeat-last-shell-command()
  "repeats last run shell command"
  (interactive)
  (shell-command (cadr (assoc 'shell-command command-history))))
(global-set-key (kbd "M-Z") 'my/repeat-last-shell-command)
#+END_SRC

Exchange below and above lines globally
#+BEGIN_SRC emacs-lisp
(defun move-line-up ()
  (interactive)
  (transpose-lines 1)
  (previous-line 2))

(defun move-line-down ()
  (interactive)
  (forward-line 1)
  (transpose-lines 1)
  (previous-line 1))

(global-set-key (kbd "M-<up>") 'move-line-up)
(global-set-key (kbd "M-<down>") 'move-line-down)
#+END_SRC

** God Mode

Some God mode commands
#+BEGIN_SRC emacs-lisp
(require 'god-mode)
(global-set-key (kbd "H-;") 'god-mode)
(define-key god-local-mode-map (kbd ".") 'repeat)
#+END_SRC

* Helm

Major configurations for the Helm Plugin
#+BEGIN_SRC emacs-lisp
(helm-mode 1)
(require 'helm)
(require 'helm-config)
(global-set-key (kbd "M-x") 'helm-M-x)
(global-set-key (kbd "C-x C-f") 'helm-find-files)
(global-set-key (kbd "C-x C-b") 'helm-buffers-list)
#+END_SRC

* Colour Theme

Load in custom colour theme
#+BEGIN_SRC emacs-lisp
(add-to-list 'custom-theme-load-path "~/.emacs.d/CustomTheme")
(load-theme 'anthony-swanking t)
#+END_SRC

* AucTex
** FlySpell

Enable spell checking for LaTex
#+BEGIN_SRC emacs-lisp
(dolist (hook '(text-mode-hook))
  (add-hook hook (lambda () (flyspell-mode 1))))
#+END_SRC

** PDF Tools

Better PDF viewing inside AucTex
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.pdf\\'" . pdf-view-mode))
(setq pdf-view-midnight-colors (cons (face-foreground 'default) (face-background 'default)))

(defun my-pdf-view-mode-hook ()
  (pdf-view-midnight-minor-mode 1)
  (linum-mode 0)
  )
(add-hook 'pdf-view-mode-hook 'my-pdf-view-mode-hook)
(pdf-tools-install)

(setq TeX-view-program-selection '((output-pdf "PDF Tools"))
      TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
      TeX-source-correlate-start-server t)
#+END_SRC

** Utility

Refresh the buffer after compilation
#+BEGIN_SRC emacs-lisp
(add-hook 'TeX-after-compilation-finished-functions
	  #'TeX-revert-document-buffer)
#+END_SRC

Possible latex templates
#+BEGIN_SRC emacs-lisp
(defun InsertTemplate-quickTeX()
  "Insert quickTeX template"
  (interactive)  
  (insert-file "~/Dropbox/Templates/quickTeX.tex")
)
(defun InsertTemplate-reviewTeX()
  "Insert reivewTeX template"
  (interactive)  
  (insert-file "~/Dropbox/Templates/reviewTeX.tex")
)
#+END_SRC

** LaTeX editing major mode

#+BEGIN_SRC emacs-lisp
(require 'tex)
(add-hook 'LaTeX-mode-hook 'my-LaTeX-mode-hook)
(defun my-LaTeX-mode-hook ()
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq-default TeX-master nil)
  (setq TeX-PDF-mode t)
  (visual-line-mode 1)
  (flyspell-mode 1)
  (LaTeX-math-mode 1)
  (TeX-source-correlate-mode 1)
  (outline-minor-mode 1)
  (local-set-key (kbd "C-M-=") '(lambda () (interactive) (insert "&= ")))
  (local-set-key (kbd "C-H-f") '(lambda () (interactive) (insert "frac{")))
  (local-set-key (kbd "C-c b") 'tex-latex-block)
  (local-set-key (kbd "<C-tab>") 'outline-toggle-children)
  )
#+END_SRC

* Coding
** Flycheck

#+BEGIN_SRC emacs-lisp
  (require 'flycheck)
#+END_SRC

** FORTRAN

Auto load in FORTRAN mode for f90 files
#+BEGIN_SRC emacs-lisp
(autoload 'f90-mode "f90" "Fortran 90 mode" t)
#+END_SRC

Insert FORTRAN template
#+BEGIN_SRC emacs-lisp
  (defun InsertTemplate-Fortran()
  (interactive)
  (when (and
         (string-match "\\.f90$" (buffer-file-name))
         (eq 1 (point-max)))
    (insert-file "~/Dropbox/Templates/FortranTemplate.f90")))    
#+END_SRC

Configurations for FORTRAN major mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'f90-mode-hook 'my-f90-mode-hook)
  (add-hook 'f90-mode-hook 'InsertTemplate-Fortran)
  (require 'fortran)
  (defun my-f90-mode-hook () 
    (local-set-key (kbd "H-M-c") (lambda () (interactive) (shell-command "./bashFortran.sh")))
    (local-set-key (kbd "H-t") 'my/f90-comment-header-block)
    (setq f90-font-lock-keywords f90-font-lock-keywords-3)
    '(f90-comment-region "!!!$")
    '(f90-indented-comment-re "!")
    (abbrev-mode 1)                     
    (turn-on-font-lock)                 
    (auto-fill-mode 0)                  
  )
#+END_SRC

Creates a heading in FORTRAN major mode
#+BEGIN_SRC emacs-lisp
(defun my/f90-comment-header-block (title)
  "Inserts a commented title block for f90"
  (interactive "sEnter a title: ")
  (defvar blank-len 1)
  (setq blank-len (/ (- 69 (length title)) 2))
  (newline)
  (dotimes (jj 5)
    (case jj
      ((0 4)
       (indent-for-tab-command)
       (insert "!")
       (dotimes (ii 69) (insert "-"))
       (insert "!")
       (newline))
      ((1 3)
       (indent-for-tab-command)
       (insert "!")
       (dotimes (ii 69) (insert " "))
       (insert "!")
       (newline))
      (2
       (indent-for-tab-command)
       (insert "!")
       (dotimes (ii blank-len)
	 (insert " "))
       (if (= (mod (length title) 2) 0)
	   (insert " ")
	 )
       (insert title)
       (dotimes (ii blank-len)
	 (insert " "))
       (insert "!")
       (newline))
  )))
#+END_SRC

Recompile FORTRAN numerical libraries 
#+BEGIN_SRC emacs-lisp
  (defun numFort-recompile ()
    "Recompile personal FORTRAN numerical libraries"
    (interactive)
    (shell-command (concat "(cd /home/anthony/Dropbox/Code/Fortran/f90-toolbox/; ./recompile.sh") ))
#+END_SRC

** Python

Insert a template for a python document
#+BEGIN_SRC emacs-lisp
  (defun InsertTemplate-Python()
    (interactive)
    (when (and
    (string-match "\\.py$" (buffer-file-name))
    (eq 1 (point-max)))
    (insert-file "~/Dropbox/Templates/PythonTemplate.py")))    
#+END_SRC

Some configurations Python major mode
#+BEGIN_SRC emacs-lisp
  (require 'python)
  (add-hook 'python-mode-hook 'my-python-mode-hook)
  (add-hook 'find-file-hooks 'InsertTemplate-Python)
  (defun my-python-mode-hook()     
    (local-set-key (kbd "C-c C-r") 'ipython-shell-send-region)
    (setq python-shell-interpreter "~/anaconda3/bin/ipython3"
          python-shell-interpreter-args "--simple-prompt -i")
    (abbrev-mode 1)                     
    )
#+END_SRC

** C++

Load in C++ major mode for .h files
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
#+END_SRC

Insert a template for a C++ document
#+BEGIN_SRC emacs-lisp
  (add-hook 'find-file-hooks 'InsertTemplate-C++)
  (defun InsertTemplate-C++()
    (interactive)
    (when (and
    (string-match "\\.cpp$" (buffer-file-name))
    (eq 1 (point-max)))
    (insert-file "~/Dropbox/Templates/c++template.cpp")))    
#+END_SRC

Some configurations C++ major mode
#+BEGIN_SRC emacs-lisp
(require 'cl)
(add-hook 'c++-mode-hook 'my-c++-mode-hook)
(defun my-c++-mode-hook ()
  (local-set-key (kbd "H-M-p")(lambda () (interactive) (shell-command "./bash_c++")))
  )
#+END_SRC

** Julia

Add paths to inferior julia shell and mode
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/elpa/julia-mode-20180816.2117/")
  (add-to-list 'load-path "~/.emacs.d/elpa/julia-shell-20161125.1910/")
  (require 'julia-mode)
#+END_SRC

Open up a Julia terminal below
#+BEGIN_SRC emacs-lisp
  (defun my/julia-set-up ()
  "Runs inferior julia shell and an emulated julia terminal via term"
    (interactive)
    (let ((w (split-window-right)))    
      (select-window w)
      (inferior-julia-shell)
      (abbrev-mode 1))
    (let ((w (split-window-below)))    
      (select-window w)
      (term "/home/anthony/bin/compilers/julia")
      (abbrev-mode 1))
    )
#+END_SRC

My Julia mode hooks
#+BEGIN_SRC emacs-lisp
  (defun my-julia-mode-hooks ()
    (require 'julia-shell)
    (abbrev-mode 1)                     
    (local-set-key (kbd "C-c C-r") 'julia-shell-run-region)
    (local-set-key (kbd "C-c C-c") 'julia-shell-run-region-or-line)
    (local-set-key (kbd "C-c C-s") 'julia-shell-save-and-go)
    (local-set-key (kbd "C-c C-p") 'my/julia-set-up)
    )
  (add-hook 'julia-mode-hook 'my-julia-mode-hooks)
#+END_SRC

#+RESULTS:
| my-julia-mode-hooks |
* Org
** Editing Code

Some configurations Org major mode
#+BEGIN_SRC emacs-lisp
(defun my-org-mode-hook ()
  (setq org-log-done t)
  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-ca" 'org-agenda)
  (visual-line-mode 1)
  (org-indent-mode 1)
  (org-bullets-mode 1)
  (abbrev-mode 1)
  ;; (linum-mode 1)
)
#+END_SRC

load mode
#+BEGIN_SRC emacs-lisp
(autoload 'org-mode "org" "Org Mode" t)
(add-hook 'org-mode-hook 'my-org-mode-hook)
#+END_SRC

load in certain languages coding modes
#+BEGIN_SRC emacs-lisp
  (require 'ob-clojure)
  (require 'ox-latex)
  (require 'org)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '(
     (python . t)
     (fortran . t)
    (latex . t)
     (shell . t)
     (emacs-lisp . t)
     ))
#+END_SRC

** Capture Mode

Add custom section titles templates
#+BEGIN_SRC emacs-lisp
    (setq org-capture-templates
          (quote (("n" "Notes" entry (file "~/Dropbox/QMC/Notes/Notes.org")
                   "* %? D/11/2018 \n** Contents \n \n** Notes \n \n** Resources ")        
                  ("Q" "Question" entry (file "~/Dropbox/QMC/Notes/Questions.org")
                   "* %?")
                  )))
#+END_SRC

Set org agenda files maybe
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files '("~/Dropbox/QMC/Notes/"))
#+END_SRC
** Key Bindings

Some key bindings for Org
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "H-/") 'org-tags-view)
#+END_SRC


** Macros

Keyboard macros for org mode
#+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-c l") 'org-store-link)
   (global-set-key (kbd "C-c a") 'org-agenda)
   (global-set-key (kbd "C-c c") 'org-capture)
#+END_SRC

Code block macros
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
               '("el" "#+BEGIN_SRC emacs-lisp\n  ?\n#+END_SRC"))
  (add-to-list 'org-structure-template-alist
               '("c" "#+BEGIN_SRC C++\n  ?\n#+END_SRC"))
  (add-to-list 'org-structure-template-alist
               '("ipy" "#+BEGIN_SRC ipython :session :exports both :results raw drawer\n  ?\n#+END_SRC"))
  (add-to-list 'org-structure-template-alist
               '("f" "#+BEGIN_SRC fortran\n  ?\n#+END_SRC"))
  (add-to-list 'org-structure-template-alist
               '("y" "#+BEGIN_SRC yaml\n  ?\n#+END_SRC"))
  (add-to-list 'org-structure-template-alist
               '("sh" "#+BEGIN_SRC shell\n  ?\n#+END_SRC"))
  (add-to-list 'org-structure-template-alist
               '("t" "#+BEGIN_SRC text\n  ?\n#+END_SRC"))
#+END_SRC

** Utility

Translate regular ol' straight quotes to typographically-correct curly quotes
when exporting.
#+BEGIN_SRC emacs-lisp
   (setq org-export-with-smart-quotes t)
#+END_SRC

Don't ask before evaluating code blocks.
#+BEGIN_SRC emacs-lisp
   (setq org-confirm-babel-evaluate nil)
#+END_SRC

For exporting to HTML
#+BEGIN_SRC emacs-lisp
   (require  'htmlize)
#+END_SRC

** Visual Settings

Nice ellipsis:
#+BEGIN_SRC emacs-lisp
   (setq org-ellipsis "⬎")
#+END_SRC

Use syntax highlighting in source blocks while editing (you may already have this).
#+BEGIN_SRC emacs-lisp
   (setq org-src-fontify-natively t)
#+END_SRC

When editing a code snippet, use the current window rather than popping open a new one.
#+BEGIN_SRC emacs-lisp
   (setq org-src-window-setup 'current-window)
#+END_SRC

Automatic indentation upon startup (or set to nil if you don't want it)
#+BEGIN_SRC emacs-lisp
  (setq org-startup-indented t)
#+END_SRC

Change Org bullets appearance
#+BEGIN_SRC emacs-lisp
(setq org-bullets-face-name (quote org-bullet-face))
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
(setq org-bullets-bullet-list '("➢" "➣" "➤" "➟" "➙" "»")) 
#+END_SRC

** Agenda alternations

Add states for to do lists
#+BEGIN_SRC emacs-lisp 
  (setq org-todo-keywords '((sequence "☛ TODO(t)" "|" "✔ DONE(d)") ;
                            (sequence "⚑ WAITING(w)" "|")
                            (sequence "|" "💀 DEAD(d)")
                            ))
#+END_SRC

** LaTeX

Use =mypackage= package for all LaTeX exports.
#+BEGIN_SRC emacs-lisp
(setq org-latex-packages-alist '())
  (add-to-list 'org-latex-packages-alist '("" "mypackage" t))
#+END_SRC

Tell org where to find LaTeX
#+BEGIN_SRC emacs-lisp
  (setq exec-path (append exec-path '("/usr/bin")))
  (load "auctex.el" nil t t)
#+END_SRC







