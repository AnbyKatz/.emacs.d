program QMC_1996_CodeV2
  use usefulFunctions
  use Kinds
  use Pyplots
  implicit none

  integer ,parameter      :: N = 1e3
  integer                 :: ii,ID,guess,jj
  real(DP),dimension(N)   :: x_ax1,x_ax2,y_ax
  real(DP),dimension(N,8) :: data

  real(DP),dimension(3)   :: coupling,BagRadii
  real(DP)                :: x,Mq,Mn,fmMeV,Bag,z0,SIGfield, &
       Msigma,Rho0,RhoB,RB,S1,S2,     &
       sigma,a,b,absErr,relErr,d,     &
       Omega0,g_sigma,Meff,V,C,Mqef,  &
       dOmega0

  !---------------------------------------------------------------------!
  !                                                                     !
  !                           Parameters Below                          !
  !                                                                     !
  !---------------------------------------------------------------------!

  coupling(1) = sqrt(5.86*4*pi) !constant
  coupling(2) = sqrt(5.40*4*pi) !constant
  coupling(3) = sqrt(5.07*4*pi) !constant
  BagRadii(1) = 0.60_DP         !fm
  BagRadii(2) = 0.80_DP         !fm
  BagRadii(3) = 1.00_DP         !fm


  ! Conversion Factors
  fmMeV  = 1/(197.327_DP)       !for fm -> MeV^{-1}

  ! Set model parameters
  Mq     = 5_DP                          !MeV
  Mn     = 939_DP                        !MeV
  Rho0   = 0.16_DP                       !fm^{-3}
  Msigma = 550_DP                        !MeV
  x_ax1  = linspace(0.001_dp,Rho0*2.5,N) !fm^{-3}


  !---------------------------------------------------------------------!
  !                                                                     !
  !                              Code Below                             !
  !                                                                     !
  !---------------------------------------------------------------------!

  x_ax2  = linspace(0.001_dp,500/coupling(1),N) !MeV
  do ii = 1,7,2
     data(:,ii) = x_ax2*coupling(1)
  end do

  RB      = BagRadii(1)*fmMeV
  g_sigma = coupling(1)
  V       = (4/3.0)*pi*(RB**3)
  Mqef    = Mq
  
  call calculate_xOmega0(RB,Mqef,x,Omega0)

  dOmega0 = (2*(Mqef**2)*RB)/Omega0
  Bag     = (3.0/(16.0*pi*(RB**3)))*(MN - 3.0*dOmega0 )
  z0      = 3.0*Omega0 - MN*RB + Bag*(4.0/3.0)*pi*(RB**4)
  S1      = (Omega0/2+Mqef*RB*(Omega0-1))&
            /(Omega0*(Omega0-1)+(Mqef*RB)/2)

  do ii = 1,N
     sigma = x_ax2(ii)
     Mqef  = Mq - (1/(3*S1))*g_sigma*sigma     
   
     call calculate_xOmega0(RB,Mqef,x,Omega0)

     S2  = (Omega0/2+Mqef*RB*(Omega0-1))&
               /(Omega0*(Omega0-1)+(Mqef*RB)/2)

     C    = S2/S1
     Meff = (3*Omega0-z0)/RB + Bag*V
     data(ii,6) = C
     data(ii,2) = Meff
  end do

  d = 6.6e-4_DP

  do ii = 1,N
     data(ii,4) = MN - (1-(d/2)*g_sigma*x_ax2(ii))*g_sigma*x_ax2(ii)
     data(ii,8) = 1 - d*g_sigma*x_ax2(ii)
  end do

  call plot(data(:,1:4))
  call plot(data(:,5:8))

contains

  !---------------------------------------------------------------------!
  !                                                                     !
  !                    Calculates Bag constant and z0                   !
  !                                                                     !
  !---------------------------------------------------------------------!

  subroutine calculate_xOmega0(RB,Mqef,x,Omega0)
    real(DP), intent(in)       :: RB,Mqef
    real(DP), intent(out)      :: x,Omega0

    real(DP), dimension(N)     :: xvals,yvals_1,yvals_2,beta

    xvals      = linspace(0.01,6.0,N)  
    yvals_1    = sin(xvals)/xvals
    beta       = sqrt( (sqrt( xvals**2+(Mqef*RB)**2 ) - Mqef*RB ) &
                 /( sqrt( xvals**2+(Mqef*RB)**2 ) + Mqef*RB ) )
    yvals_2    = beta*(sin(xvals)/(xvals**2)-cos(xvals)/xvals)
    guess  = GuessZero(yvals_1-yvals_2)

    x = newton1D(f,xvals(guess))
    Omega0 = sqrt( x**2 + (Mqef*RB)**2 )

  end subroutine calculate_xOmega0

  function f(x)
    real(DP),intent(in) :: x
    real(DP)            :: f

    f = (sqrt( (sqrt( x**2+(Mqef*RB)**2 ) - Mqef*RB ) &
         /( sqrt( x**2+(Mqef*RB)**2 ) + Mqef*RB ) ))* &
         (sin(x)/(x**2)-cos(x)/x) - sin(x)/x         

  end function  f

end program QMC_1996_CodeV2
