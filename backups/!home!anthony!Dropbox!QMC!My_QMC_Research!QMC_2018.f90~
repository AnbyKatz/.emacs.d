program QMC_2018
  use kinds
  use UsefulFunctions
  use odeInt
  use pyplots
  implicit none

  integer  ,parameter             :: N = 1000,L=78,M=13
  integer                         :: i,j,test
  character(len=20) ,dimension(2) :: titles
  real(DP) ,dimension(N,2)        :: Pvals,epsvals
  real(DP) ,dimension(N,4)        :: data
  real(DP) ,dimension(6,2)        :: parameters
  real(DP) ,dimension(L)          :: t,y
  real(DP),dimension(M+1)         :: coeffs
  real(DP)                        :: N1,p1,N2,p2,r,a,empty,&
       & conv1,conv2,conv3,t0,y0

  !---------------------------------------------------------------------!
  !                                                                     !
  !                           Model Parameters                          !
  !                                                                     !
  !---------------------------------------------------------------------!

  parameters(1,1) = 0         ! MeV/fm^{-3}
  parameters(1,2) = 2.62e-7   ! MeV/fm^{-3}
  parameters(2,1) = 0         ! MeV/fm^{-3}
  parameters(2,2) = 3.197_DP  ! MeV/fm^{-3}
  parameters(3,1) = 8.623e-3  ! MeV/fm^{-3}
  parameters(3,2) = 0.0251_DP ! MeV/fm^{-3}
  parameters(4,1) = 1.548_DP  ! MeV/fm^{-3}
  parameters(4,2) = 1.286_DP  ! MeV/fm^{-3}
  parameters(5,1) = 342.4_DP  ! MeV/fm^{-3}
  parameters(5,2) = 522.1_DP  ! MeV/fm^{-3}
  parameters(6,1) = 184.4_DP  ! MeV/fm^{-3}
  parameters(6,2) = 113.0_DP  ! MeV/fm^{-3}

  conv1 = 3.5178e14           ! 1/fm^4 -> g/cm^3
  conv2 = 197.33              ! 1/fm^4 -> MeV/fm^3
  conv3 = 3.1616e35           ! 1/fm^4 -> dyne/cm^2

  titles(1) = "data"
  titles(2) = "fit"

  !---------------------------------------------------------------------!
  !                                                                     !
  !                                 Code                                !
  !                                                                     !
  !---------------------------------------------------------------------!

  i = 2

  N1 = parameters(1,i)
  p1 = parameters(2,i)
  N2 = parameters(3,i)
  p2 = parameters(4,i)
  r = parameters(5,i)
  a = parameters(6,i)

  epsvals(:,i) = linspace(0.0,1200.0,N) ! MeV/fm^{-3}

  do j = 1,N
     Pvals(j,i) = P(epsvals(j,i))
  end do

  data(:,1) = epsvals(:,i)
  data(:,2) = Pvals(:,i)

  ! call plot(data,"É› (MeV/fm^3)","P (MeV/fm^3)",titles)

  open(100,file="theo_data",action="read",status="old",form="formatted")

  do i=1,L
     read(100,*) t(i),y(i),empty
  end do

  data(1:L,1) = (t/conv1)*conv2  ! MeV/fm^3
  data(1:L,2) = (y/conv3)*conv2  ! MeV/fm^3

  call polyfit(data(1:L,1),data(1:L,2),M,coeffs)    
  do i=1,L
     data(i,4) = polycal(M,coeffs,data(i,1))
  end do
  data(1:L,3) = data(1:L,1)
  call plot(data(1:L,:),"","",titles)







contains








  function P(eps)
    use kinds
    implicit none

    real(DP),intent(in) :: eps
    real(DP)            :: P

    P   = (N1*(eps**(p1))/(1+exp((eps-r)/a)))&
         &+(N2*(eps**(p2))/(1+exp(-(eps-r)/a)))

  end function P

end program QMC_2018
