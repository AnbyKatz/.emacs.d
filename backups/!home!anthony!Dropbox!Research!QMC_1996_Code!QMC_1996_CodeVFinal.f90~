program QMC_1996_CodeVFinal
  use usefulFunctions
  use Kinds
  use Pyplots
  implicit none

!-----------------------------------------------------------------------!
! Below contains code which reproduces plots from the 1996 QMC
! finite nuclei paper
!
!
!

  integer                             :: ii,jj,ID,guess,counter,N
  real(DP),dimension(:),  allocatable :: x_ax1,x_ax2,y_ax
  real(DP),dimension(:,:),allocatable :: data,data1,data2,data3
  real(DP),dimension(3)               :: couple,BagRadii

  real(DP)                            :: x,Mq,Mn,fmMeV,Bag,z0,SIGfield, &
       Msigma,Rho0,RhoB,RB,S1,S2,     &
       sigma,a,b,absErr,relErr,       &
       Omega0,g_sigma,Meff,V,C,Mqef,  &
       dOmega0,var,xx,yval,ed,dx,d

  !---------------------------------------------------------------------!
  !                                                                     !
  !                           Parameters Below                          !
  !                                                                     !
  !---------------------------------------------------------------------!

  couple(1)   = sqrt(5.86*4*pi)          !constant
  couple(2)   = sqrt(5.40*4*pi)          !constant
  couple(3)   = sqrt(5.07*4*pi)          !constant
  BagRadii(1) = 0.60_DP                  !fm
  BagRadii(2) = 0.80_DP                  !fm
  BagRadii(3) = 1.00_DP                  !fm

  ! Conversion Factor
  fmMeV  = 1/(197.327_DP)                !for fm -> MeV^{-1}

  !Set model parameters
  Mq     = 5_DP                          !MeV
  Mn     = 939_DP                        !MeV
  Rho0   = 0.16_DP                       !fm^{-3}
  Msigma = 550_DP                        !MeV
  absErr = 1e-6_DP
  relErr = 1e-6_DP
  a      = 0.0_DP

  OPEN(100,file="1996_Results.dat",action="write", &
       & status="replace",form="formatted")

  N = 1e3
  !N = 1e4

  allocate(x_ax1(N),x_ax2(N),y_ax(N),&
       data(N,6),data1(N,6),data2(N,6),data3(N,6))
  x_ax1  = linspace(0.001_dp,Rho0*2.5,N) !fm^{-3}

  !---------------------------------------------------------------------!
  !                                                                     !
  !                                Plots                                !
  !                                                                     !
  !---------------------------------------------------------------------!

  call QMC_fit()
  !call QMC_nofit()

  Close(100)

contains

  !---------------------------------------------------------------------!
  !                                                                     !
  !                    Subroutines & Functions Below                    !
  !                                                                     !
  !---------------------------------------------------------------------!

  !-----------------------------------------------------------------------!
  !-----------------------------------------------------------------------!
  !-----------------------------------------------------------------------!

  !---------------------------------------------------------------------!
  !                                                                     !
  !                       Plots without fit (SLOW)                      !
  !                                                                     !
  !---------------------------------------------------------------------!

  subroutine QMC_nofits()
    use Kinds
    implicit none

    ed     = 400_DP                        !MeV

    do ii = 1,5,2
       data(:,ii) = x_ax1/Rho0
    end do

    do jj = 1,3                   

       Mqef    = Mq
       RB      = BagRadii(jj)*fmMeV
       g_sigma = couple(jj)
       V       = (4/3.0)*pi*(RB**3)
       x_ax2   = linspace(0.001_dp,ed/g_sigma,N)

       call cal_xOmega0(RB,Mqef,x,Omega0)

       dx      = deriv(xderiv,RB)
       dOmega0 = 2*((Mqef**2)*RB+dx*x)/Omega0
       Bag     = (3.0/(16.0*pi*(RB**3)))*(MN - 3.0*dOmega0 )
       z0      = 3.0*Omega0 - MN*RB + Bag*(4.0/3.0)*pi*(RB**4)
       S1      = (Omega0/2+Mqef*RB*(Omega0-1))&
            /(Omega0*(Omega0-1)+(Mqef*RB)/2)

       do ii = 1,N
          sigma = x_ax2(ii)
          Mqef  = Mq - (1/(3*S1))*g_sigma*sigma     

          call cal_xOmega0(RB,Mqef,x,Omega0)

          S2  = (Omega0/2+Mqef*RB*(Omega0-1))&
               /(Omega0*(Omega0-1)+(Mqef*RB)/2)

          C    = S2/S1
          Meff = (3*Omega0-z0)/RB + Bag*V
          xx = x_ax1(ii)

          call cal_SMF_nofit(RB,yval)
          data(ii,2*jj) = yval*g_sigma

       end do

    end do

    call plot(data)

  end subroutine QMC_nofits

  !---------------------------------------------------------------------!
  !                                                                     !
  !                        Plots with fit (FAST)                        !
  !                                                                     !
  !---------------------------------------------------------------------!

  subroutine QMC_fit()
    use Kinds
    implicit none

    ed     = 500_DP                        !MeV
    counter = 1

    DO ii = 2,6,2    

       g_sigma = couple(counter)
       RB      = BagRadii(counter)*fmMeV
       d       = 0.22*RB
       Mqef    = Mq
       x_ax2   = linspace(0.001_dp,ed/g_sigma,N)

       call cal_xOmega0(RB,Mqef,x,Omega0)

       dx      = deriv(xderiv,RB)
       dOmega0 = 2*((Mqef**2)*RB+dx*x)/Omega0
       Bag     = (3.0/(16.0*pi*(RB**3)))*(MN - 3.0*dOmega0 )
       z0      = 3.0*Omega0 - MN*RB + Bag*(4.0/3.0)*pi*(RB**4)

       WRITE(100,'(f12.4,f12.4)') Bag**(1/4.0),z0

       CALL cal_SMF_fit(g_sigma,RB,data1(:,ii))
       data1(:,ii) = data1(:,ii)*g_sigma
       CALL cal_MeffC(data1(:,ii),data2(:,ii),data3(:,ii))
       counter = counter+1

    END DO

    x_ax1 = x_ax1/Rho0

    DO ii = 1,6,2
       data1(:,ii) = x_ax1                    !data1 = (g_σ)σ VS ρ/ρ₀
       data2(:,ii) = x_ax1                    !data2 = Mₙ* VS ρ/ρ₀
       data3(:,ii) = data1(:,ii+1)            !data3 = C VS (g_σ)σ
    END DO

    CALL plot(data1,"ρ/ρ₀","(g_σ)σ (MeV)")
    CALL plot(data2,"ρ/ρ₀","Mₙ* (MeV)")
    CALL plot(data3,"(g_σ)σ (MeV)","C")

  end subroutine QMC_fit

  !-----------------------------------------------------------------------!
  !-----------------------------------------------------------------------!
  !-----------------------------------------------------------------------!

  !---------------------------------------------------------------------!
  !                                                                     !
  !                    Calculates Bag constant and z0                   !
  !                                                                     !
  !---------------------------------------------------------------------!

  subroutine cal_xOmega0(RB,Mqef,x,Omega0)
    real(DP), intent(in)       :: RB,Mqef
    real(DP), intent(out)      :: x,Omega0

    real(DP), dimension(N)     :: xvals,yvals_1,yvals_2,beta

    xvals      = linspace(0.01,6.0,N)  
    yvals_1    = sin(xvals)/xvals
    beta       = sqrt( (sqrt( xvals**2+(Mqef*RB)**2 ) - Mqef*RB ) &
         /( sqrt( xvals**2+(Mqef*RB)**2 ) + Mqef*RB ) )
    yvals_2    = beta*(sin(xvals)/(xvals**2)-cos(xvals)/xvals)
    guess  = GuessZero(yvals_1-yvals_2)

    x = newton1D(Bessel_f,xvals(guess))
    Omega0 = sqrt( x**2 + (Mqef*RB)**2 )

  end subroutine cal_xOmega0

  !---------------------------------------------------------------------!
  !                                                                     !
  !                   Calculates Effective Mass and C                   !
  !                                                                     !
  !---------------------------------------------------------------------!

  SUBROUTINE cal_MeffC(xvals,Meff,C)
    USE Kinds
    IMPLICIT NONE

    REAL(DP),DIMENSION(:),INTENT(in)  :: xvals
    REAL(DP),DIMENSION(:),INTENT(out) :: Meff,C

    Meff = MN - (1-(d/2)*xvals)*xvals
    C    = 1 - d*xvals

  END SUBROUTINE cal_MeffC

  function Bessel_f(x)
    real(DP),intent(in) :: x
    real(DP)            :: Bessel_f

    Bessel_f = (sqrt( (sqrt( x**2+(Mqef*RB)**2 ) - Mqef*RB ) &
         /( sqrt( x**2+(Mqef*RB)**2 ) + Mqef*RB ) ))* &
         (sin(x)/(x**2)-cos(x)/x) - sin(x)/x         
  end function Bessel_f

  function xderiv(RB)
    real(DP),intent(in) :: RB
    real(DP)            :: xderiv

    xderiv = sqrt( Omega0**2 - (Mqef*RB)**2 )

  end function xderiv


  !-----------------------------------------------------------------------!
  !-----------------------------------------------------------------------!
  !-----------------------------------------------------------------------!

  !---------------------------------------------------------------------!
  !                                                                     !
  !                  Subroutines/Functions for fit run                  !
  !                                                                     !
  !---------------------------------------------------------------------!

  SUBROUTINE cal_SMF_fit(g_sigma,RB,yvals)
    USE Kinds
    IMPLICIT NONE

    REAL(DP),INTENT(in)               :: g_sigma,RB
    REAL(DP),DIMENSION(N),INTENT(out) :: yvals

    REAL(DP),DIMENSION(N)             :: yy
    INTEGER                           :: kk

    x_ax2 = linspace(0.001_dp,ed/g_sigma,N)      !MeV

    DO jj = 1,N

       RhoB = x_ax1(jj)*(fmMeV**(-3))        !MeV^{3}
       b =(3*(pi**2)*RhoB/2)**(1/3.0)        !MeV

       DO kk = 1,N
          sigma = x_ax2(kk)
          yy(kk) = (((g_sigma/Msigma**2)*(1-d*g_sigma*sigma)*(2/pi**2))&
               *integral(SMF_integral_fit,a,b,absErr,relErr))-sigma
       END DO

       guess = GuessZero(yy)
       yvals(jj) = newton1D(SMF_newton_fit,x_ax2(guess))

    END DO

  END SUBROUTINE cal_SMF_fit

  FUNCTION SMF_integral_fit(x)
    USE Kinds
    IMPLICIT NONE

    REAL(DP), INTENT(in)  :: x
    REAL(DP)              :: SMF_integral_fit

    REAL(DP)              :: C,Meff

    C = 1-d*g_sigma*sigma
    Meff = MN - (1-(d/2)*g_sigma*sigma)*g_sigma*sigma

    SMF_integral_fit = (Meff*(x**2))/(SQRT( Meff**2 + x**2 ))

  END FUNCTION SMF_integral_fit

  FUNCTION SMF_newton_fit(x)
    USE Kinds
    IMPLICIT NONE

    REAL(DP), INTENT(in)  :: x
    REAL(DP)              :: SMF_newton_fit

    sigma = x
    SMF_newton_fit = (((g_sigma/Msigma**2)*(1-d*g_sigma*x)*(2/pi**2))&
         *integral(SMF_integral_fit,a,b,absErr,relErr))-x

  END FUNCTION SMF_newton_fit


  !---------------------------------------------------------------------!
  !                                                                     !
  !                 Subroutines/Functions for no fit run                !
  !                                                                     !
  !---------------------------------------------------------------------!

  subroutine cal_SMF_nofit(RB,yval)
    real(DP),intent(in)   :: RB
    real(DP),intent(out)  :: yval

    real(DP),dimension(N) :: yvals
    integer               :: kk

    RhoB = xx*(fmMeV**(-3))       !MeV^{3}
    b =(3*(pi**2)*RhoB/2)**(1/3.0)       !MeV

    do kk = 1,N
       var    = x_ax2(kk) 
       yvals(kk) = (((g_sigma/Msigma**2)*C*(2/pi**2))&
            *integral(SMF_integral_nofit,a,b,absErr,relErr))- var
    end do

    guess = GuessZero(yvals)
    yval = newton1D(SMF_newton_nofit,x_ax2(guess))

  end subroutine cal_SMF_nofit

  function SMF_integral_nofit(x)
    real(DP), intent(in) :: x    
    real(DP)             :: SMF_integral_nofit

    SMF_integral_nofit = (Meff*(x**2))/(SQRT( Meff**2 + x**2 ))

  end function SMF_integral_nofit

  function SMF_newton_nofit(x)
    real(DP),intent(in) :: x
    real(DP)            :: SMF_newton_nofit

    var = x
    SMF_newton_nofit  = (((g_sigma/Msigma**2)*C*(2/pi**2))&
         *integral(SMF_integral_nofit,a,b,absErr,relErr))-x

  end function SMF_newton_nofit

end program QMC_1996_CodeVFinal
