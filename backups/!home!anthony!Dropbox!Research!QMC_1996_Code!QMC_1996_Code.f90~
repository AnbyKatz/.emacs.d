program QMC_1996_Code
  use usefulFunctions
  use Kinds
  use Pyplots
  implicit none

  integer ,parameter     :: N = 1000
  integer                :: ii,ID,guess,counter
  real(DP),dimension(N)  :: x_ax,y_ax
  real(DP),dimension(N,6):: data1,data2,data3

  real(DP),dimension(3)  :: coupling,BagRadii
  real(DP)               :: x,Omega0,dOmega0, &
       Mq,Mn,fmMeV,Bag,z0,SIGfield,&
       Msigma,Rho0,RhoB,Sc_G,RB,&
       sigma,a,b,absErr,relErr,d

  !---------------------------------------------------------------------!
  !                                                                     !
  !                           Parameters Below                          !
  !                                                                     !
  !---------------------------------------------------------------------!

  coupling(1) = sqrt(5.86*4*pi)           !constant
  coupling(2) = sqrt(5.40*4*pi)           !constant
  coupling(3) = sqrt(5.07*4*pi)           !constant
  BagRadii(1) = 0.6                       !fm
  BagRadii(2) = 0.8                       !fm
  BagRadii(3) = 1.0                       !fm
  counter = 1

  ! Conversion Factors
  fmMeV = 1/(197.327)                     !for fm -> MeV^{-1}

  ! Set model parameters
  Mq = 5                                  !MeV
  Mn = 939                                !MeV
  Rho0 = 0.16_dp                          !fm^{-3}
  Msigma = 550                            !MeV
  x_ax = linspace(0.001_dp,Rho0*2.5,N)    !fm^{-3}
  
  !---------------------------------------------------------------------!
  !                                                                     !
  !                              Code Below                             !
  !                                                                     !
  !---------------------------------------------------------------------!

  open(100,file="1996_Results.dat",action="write", &
       & status="replace",form="formatted")

  do ii = 2,6,2    
     Sc_G = coupling(counter)
     RB   = BagRadii(counter)
     call calculate_Bzd(RB,Mq,Bag,z0,d)
     write(100,'(f12.4,f12.4)') Bag**(1/4.0),z0
     call gsigmaVSrhob(Sc_G,RB,data1(:,ii))  
     data1(:,ii) = data1(:,ii)*Sc_G
     call Meff_C(data1(:,ii),data2(:,ii),data3(:,ii))
     counter = counter+1
  end do

  x_ax = x_ax/Rho0

  do ii = 1,6,2
     data1(:,ii) = x_ax
     data2(:,ii) = x_ax
     data3(:,ii) = data1(:,ii+1)
  end do

  call plot(data1,"ρ/ρ₀","(g_σ)σ (MeV)")
  call plot(data2,"ρ/ρ₀","Mₙ* (MeV)")
  call plot(data3,"(g_σ)σ (MeV)","C")

  close(100)



















Contains

  !---------------------------------------------------------------------!
  !                                                                     !
  !                    Calculates Bag constant and z0                   !
  !                                                                     !
  !---------------------------------------------------------------------!


  subroutine calculate_Bzd(RB,Mq,Bag,z0,d)
    use usefulFunctions
    use Kinds
    implicit none
    real(DP), intent(in) :: RB,Mq
    real(DP), intent(out):: Bag,z0,d

    integer , parameter        :: N = 10000, delta = 10
    integer,  dimension(1)     :: loc
    integer                    :: intersect
    real(DP), dimension(N)     :: xvals_1,yvals_1,yvals_2,beta
    real(DP), dimension(delta) :: xmin_array
    real(DP)                   :: st,ed,radius

    radius = RB*fmMeV

    st = 0.01
    ed = 6.0
    xvals_1 = linspace(st,ed,N)  
    yvals_1 = sin(xvals_1)/xvals_1
    beta = sqrt( ( sqrt( xvals_1**2+(Mq*radius)**2 ) - Mq*radius ) &
         /( sqrt( xvals_1**2+(Mq*radius)**2 ) + Mq*radius ) )
    yvals_2 = beta*(sin(xvals_1)/(xvals_1**2)-cos(xvals_1)/xvals_1)

    intersect = GuessZero(yvals_1-yvals_2)

    xmin_array = yvals_1(intersect-delta:intersect) &
         - yvals_2(intersect-delta:intersect)

    loc = minloc(xmin_array)
    x = xvals_1(intersect-(delta-loc(1)))

    Omega0 = sqrt( x**2 + (Mq*radius)**2 )
    dOmega0 = (2*(Mq**2)*radius)/Omega0

    Bag = (3.0/(16.0*pi*(radius**3)))*(MN - 3.0*dOmega0 )
    z0 = 3.0*Omega0 - MN*radius +Bag*(4.0/3.0)*pi*(radius**4)

    d = 0.22*RB         !fm
    d = d*fmMeV         !MeV^{-1}

  end subroutine calculate_Bzd

  !---------------------------------------------------------------------!
  !                                                                     !
  !                        Function to Integrate                        !
  !                                                                     !
  !---------------------------------------------------------------------!

  function f(x)
    use Kinds
    implicit none

    real(DP), intent(in)  :: x
    real(DP)              :: f

    REAL(DP)              :: C,Meff

    C = 1-d*Sc_G*sigma
    Meff = MN - (1-(d/2)*Sc_G*sigma)*Sc_G*sigma

    f = (Meff*(x**2))/(sqrt( Meff**2 + x**2 ))

  end function f

  !---------------------------------------------------------------------!
  !                                                                     !
  !                   Solve of zero's of this Function                  !
  !                                                                     !
  !---------------------------------------------------------------------!

  function g(x)
    use Kinds
    implicit none

    real(DP), intent(in)  :: x
    real(DP)              :: g

    sigma = x
    g = (((Sc_G/Msigma**2)*(1-d*Sc_G*x)*(2/pi**2))&
         *integral(f,a,b,absErr,relErr))-x

  end function g


  !---------------------------------------------------------------------!
  !                                                                     !
  !                Returns y-values of scalar meson field               !
  !                                                                     !
  !---------------------------------------------------------------------!


  subroutine gsigmaVSrhob(Sc_G,RB,yvals)
    use Kinds
    implicit none

    real(DP),intent(in)               :: Sc_G,RB
    real(DP),dimension(N),intent(out) :: yvals

    real(DP),dimension(N)             :: xx,yy
    integer                           :: jj,kk

    xx = linspace(0.001_dp,500/Sc_G,N)      !MeV
    absErr = 1e-6
    relErr = 1e-6
    a = 0

    do jj = 1,N

       RhoB = x_ax(jj)*(fmMeV**(-3))        !MeV^{3}
       b =(3*(pi**2)*RhoB/2)**(1/3.0)       !MeV

       do kk = 1,N
          sigma = xx(kk)
          yy(kk) = (((Sc_G/Msigma**2)*(1-d*Sc_G*sigma)*(2/pi**2))&
               *integral(f,a,b,absErr,relErr))-sigma
       end do

       guess = GuessZero(yy)
       yvals(jj) = newton1D(g,xx(guess))

    end do

  end subroutine gsigmaVSrhob


  !---------------------------------------------------------------------!
  !                                                                     !
  !                      Effective Mass Calculation                     !
  !                                                                     !
  !---------------------------------------------------------------------!


  subroutine Meff_C(xvals,Meff,C)
    use Kinds
    implicit none

    real(DP),dimension(:),intent(in)  :: xvals
    real(DP),dimension(:),intent(out) :: Meff,C

    real(DP) :: tst

    Meff = MN - (1-(d/2)*xvals)*xvals
    C    = 1 - d*xvals

  end subroutine Meff_C

end program QMC_1996_Code
