program test_code
  use usefulFunctions
  use Kinds
  use Pyplots
  use MyIntegrate
  implicit none

  integer ,parameter     :: N = 1000
  integer                :: ii,mm,ID,guess
  real(DP),dimension(N)  :: x_axis,y_axis1,y_axis2,y_axis3
  real(DP),dimension(3)  :: coupling,BagRadii
  real(DP)               :: x,Omega0,dOmega0, &
       Mq,Mn,fmMeV,Bag,z0,SIGfield,fval,fderiv,&
       Msigma,Rho0,RhoB,TESTval,d,Sc_G,RB,&
       start,end,sigma,a,b,absErr,relErr



  !---------------------------------------------------------------------!
  !                                                                     !
  !                           Parameters Below                          !
  !                                                                     !
  !---------------------------------------------------------------------!

  coupling(1) = sqrt(5.86*4*pi)
  coupling(2) = sqrt(5.40*4*pi)
  coupling(3) = sqrt(5.07*4*pi)
  BagRadii(1) = 0.6                       !fm
  BagRadii(2) = 0.8                       !fm
  BagRadii(3) = 1.0                       !fm

  ! Conversion Factors
  fmMeV = 1/(197.327)                     !for fm -> MeV^{-1}

  ! Set model parameters
  Mq = 5                                  !MeV
  Mn = 939                                !MeV
  Rho0 = 0.16_dp                          !fm^{-3}
  Msigma = 550                            !MeV
  x_axis = linspace(0.001_dp,Rho0*2.5,N)  !fm^{-3}

  !---------------------------------------------------------------------!
  !                                                                     !
  !                              Code Below                             !
  !                                                                     !
  !---------------------------------------------------------------------!

  Sc_G = coupling(1)
  RB   = BagRadii(1)
  call gsigmaVSrhob(Sc_G,RB,y_axis1)  
  Sc_G = coupling(2)
  RB   = BagRadii(2)
  call gsigmaVSrhob(Sc_G,RB,y_axis2)
  Sc_G = coupling(3)
  RB   = BagRadii(3)
  call gsigmaVSrhob(Sc_G,RB,y_axis3)
  x_axis = x_axis/Rho0
  call plot(x_axis,y_axis1*coupling(1),&
       x_axis,y_axis2*coupling(2),&
       x_axis,y_axis3*coupling(3))










Contains

  !---------------------------------------------------------------------!
  !                                                                     !
  !                    Calculates Bag constant and z0                   !
  !                                                                     !
  !---------------------------------------------------------------------!


  subroutine calculate_Bz(RB,Mq,Bag,z0)
    use usefulFunctions
    use Kinds
    implicit none
    real(DP), intent(in) :: RB,Mq
    real(DP), intent(out):: Bag,z0

    integer , parameter        :: N = 10000, delta = 10
    integer,  dimension(1)     :: loc
    integer                    :: kk
    real(DP), dimension(N)     :: x_axis_1,y_axis_1,y_axis_2,beta
    real(DP), dimension(delta) :: xmin_array
    real(DP)                   :: st,ed,radius

    radius = RB*fmMeV

    st = 0.01
    ed = 6.0
    x_axis_1 = linspace(st,ed,N)  
    y_axis_1 = sin(x_axis_1)/x_axis_1
    beta = sqrt( ( sqrt( x_axis_1**2+(Mq*radius)**2 ) - Mq*radius ) &
         /( sqrt( x_axis_1**2+(Mq*radius)**2 ) + Mq*radius ) )
    y_axis_2 = beta*(sin(x_axis_1)/(x_axis_1**2)-cos(x_axis_1)/x_axis_1)

    do kk = 1,N
       if( y_axis_1(kk)-y_axis_2(kk) < 0 ) exit
    end do

    xmin_array = y_axis_1(kk-delta:kk) - y_axis_2(kk-delta:kk)
    loc = minloc(xmin_array)
    x = x_axis_1(kk-(delta-loc(1)))

    Omega0 = sqrt( x**2 + (Mq*radius)**2 )
    dOmega0 = (2*(Mq**2)*radius)/Omega0

    Bag = (3.0/(16.0*pi*(radius**3)))*(MN - 3.0*dOmega0 )
    z0 = 3.0*Omega0 -MN*radius +Bag*(4.0/3.0)*pi*(radius**4)

  end subroutine calculate_Bz

  !---------------------------------------------------------------------!
  !                                                                     !
  !                        Function to Integrate                        !
  !                                                                     !
  !---------------------------------------------------------------------!

  function f(x)
    use Kinds
    implicit none

    real(DP), intent(in)  :: x
    real(DP)              :: f

    REAL(DP)              :: C,Meff

    C = 1-d*Sc_G*sigma
    Meff = MN - (1-(d/2)*Sc_G*sigma)*Sc_G*sigma

    f = (Meff*(x**2))/(sqrt( Meff**2 + x**2 ))

  end function f

  !---------------------------------------------------------------------!
  !                                                                     !
  !                   Solve of zero's of this Function                  !
  !                                                                     !
  !---------------------------------------------------------------------!

  function g(x)
    use Kinds
    implicit none

    real(DP), intent(in)  :: x
    real(DP)              :: g

    sigma = x

    g = (((Sc_G/Msigma**2)*(1-d*Sc_G*x)*(2/pi**2))&
         *integral(f,a,b,absErr,relErr))-x

  end function g


  !---------------------------------------------------------------------!
  !                                                                     !
  !                Returns y-values of scalar meson field               !
  !                                                                     !
  !---------------------------------------------------------------------!


  subroutine gsigmaVSrhob(Sc_G,RB,yvalues)
    use Kinds
    implicit none

    real(DP),intent(in)               :: Sc_G,RB
    real(DP),dimension(N),intent(out) :: yvalues

    real(DP),dimension(N)             :: xx,yy

    d = 0.22*RB                             !fm
    d = d*fmMeV                             !MeV^{-1}
    xx = linspace(0.001_dp,500/Sc_G,N)      !MeV
    absErr = 0.001
    relErr = 0.001
    a = 0

    do mm = 1,N

       RhoB = x_axis(mm)*(fmMeV**(-3))
       b =(3*pi*RhoB/2.0)**(1/3.0)

       do ii = 1,N
          sigma = xx(ii)
          yy(ii) = (((Sc_G/Msigma**2)*(1-d*Sc_G*sigma)*(2/pi**2))&
               *integral(f,a,b,absErr,relErr))-sigma
       end do

       guess = GuessZero(yy)
       yvalues(mm) = newton1D(g,xx(guess))

    end do

  end subroutine gsigmaVSrhob

end program
