#!/usr/bin/env python3.5
import matplotlib.pyplot as pypl
import numpy as np
import math as m
from scipy.integrate import quad
from matplotlib import rc
from pylab import*
from sympy import*

data = np.loadtxt("BBChaos145Hz-1.txt")
N=2**12

driving_freq=data[0:N-2:4,0]
ball_height=data[0:N-2:4,1]

N=int(N/4)

noise=np.random.rand(N,1)
noise=noise-0.5;
noise=noise*0.264;

fourier_noise=np.fft.fft(noise)
fourier_driver=np.fft.fft(driving_freq)
fourier_height=np.fft.fft(ball_height)

drive_power=(np.square(np.absolute(fourier_driver)))/N**2
ball_power=(np.square(np.absolute(fourier_height)))

i=np.argmax(drive_power)
fs=(N*145)/i

w0=6;
L2=50;
tmax=N/fs;

s=np.linspace(0.005,0.05,L2);
t=np.linspace(0,tmax,N);

t_int=t[len(t)-1]/len(t);

func = lambda t: (m.pi**(-1/4))*np.exp(w0*1j**t)*np.exp((-t**2)/2)

T, S = np.meshgrid(t,s)

G=func(T/S)

freq=(w0+np.sqrt(2+w0**2))/(4*m.pi*s)
T,F=np.meshgrid(t,freq)
G_Fourier=np.fft.fft(G,n=None,axis=1)

for ii in range(len(s)-1):
    for jj in range(len(G_Fourier[0,:])-1):
        G_Fourier[ii,jj]=np.sqrt((2*m.pi*s[ii])/t_int)*G_Fourier[ii,jj]



        
W = np.fft.ifft((np.conj(G_Fourier)*np.transpose(fourier_driver)),n=None,axis=1)
P1 = np.absolute(W)**2

figure1=pypl.figure()
pypl.contourf(T,F,np.log(P1))
pypl.title("Driver")
pypl.colorbar()
pypl.show()

W = np.fft.ifft((np.conj(G_Fourier)*np.transpose(fourier_height)),n=None,axis=1)
P2 = np.absolute(W)**2

figure2=pypl.figure()
pypl.contourf(T,F,np.log(P2))
pypl.title("Height")
pypl.colorbar()
pypl.show()

W = np.fft.ifft((np.conj(G_Fourier)*np.transpose(fourier_noise)),n=None,axis=1)
P3 = np.absolute(W)**2

figure3=pypl.figure()
pypl.contourf(T,F,np.log(P3))
pypl.title("Noise")
pypl.colorbar()
pypl.show()

figure4=pypl.figure()
pypl.contourf(T,F,np.log(P2/P3))
pypl.title("Ratio")
pypl.colorbar()
pypl.show()
