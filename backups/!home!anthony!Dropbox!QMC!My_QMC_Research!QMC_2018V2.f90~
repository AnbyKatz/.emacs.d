program QMC_2018V2
  use kinds
  use UsefulFunctions
  use pyplots
  implicit none

  integer  ,parameter             :: N = 1000,L=78,M=13
  integer                         :: i,j
  character(len=20) ,dimension(2) :: titles
  real(DP) ,dimension(6,2)        :: parameters
  real(DP) ,dimension(L,2)        :: crust
  real(DP) ,dimension(L)          :: crust_t,crust_y,intvals

  real(DP) ,dimension(N,4)        :: test
  real(DP) ,dimension(N)          :: Pvals,Rho,radius,splc,splvals,Pr
  real(DP)                        :: N1,p1,N2,p2,r,a,empty,&
       & conv1,conv2,conv3,conv4,conv5, &
       & t0,tN,RhoIn,h,y,t, &
       & absErr,relErr,y0,Rho0,val


  !---------------------------------------------------------------------!
  !                                                                     !
  !                           Model Parameters                          !
  !                                                                     !
  !---------------------------------------------------------------------!

  parameters(1,1) = 0         
  parameters(1,2) = 2.62e-7   
  parameters(2,1) = 0         
  parameters(2,2) = 3.197_DP  
  parameters(3,1) = 8.623e-3  
  parameters(3,2) = 0.0251_DP 
  parameters(4,1) = 1.548_DP  
  parameters(4,2) = 1.286_DP  
  parameters(5,1) = 342.4_DP  
  parameters(5,2) = 522.1_DP  
  parameters(6,1) = 184.4_DP  
  parameters(6,2) = 113.0_DP  

  conv1 = 3.5178e14           ! 1/fm^4 -> g/cm^3
  conv2 = 197.33_DP           ! 1/fm^4 -> MeV/fm^3
  conv3 = 3.1616e35           ! 1/fm^4 -> dyne/cm^2
  conv4 = 1.3234e-6           ! MeV/fm^3 -> 1/km^2
  conv5 = 1.4766_DP           ! Solar Mass -> km

  titles(1) = "data"
  titles(2) = "fit"

  Rho0 = 0.16_DP              ! 1/fm^3
  absErr = 1e-6
  relErr = 1e-6

  !---------------------------------------------------------------------!
  !                                                                     !
  !                                 Code                                !
  !                                                                     !
  !---------------------------------------------------------------------!

  i  = 2
  N1 = parameters(1,i)
  p1 = parameters(2,i)
  N2 = parameters(3,i)
  p2 = parameters(4,i)
  r  = parameters(5,i)
  a  = parameters(6,i)

  Rho(:) = linspace(0.0,1200.0,N) ! MeV/fm^3
  do j = 1,N
     Pvals(j) = P(Rho(j))         ! MeV/fm^3
  end do

  ! call calccrust()

  Pvals = Pvals*conv4 ! 1/km^2
  Rho = Rho*conv4     ! 1/km^2
  call splinefit(Pvals,Rho,splc)

  t0 = 0.01_DP        ! km
  tN = 20.0_DP        ! km
  h = (tN-t0)/(N-1)   ! km
  y0 = 145.0      ! MeV/fm^3
  y0 = y0*conv4       ! 1/km^2

  t = t0
  do j = 1,N  
     call rk4_step(h,t,y0,dPdr,y)
     if ( y <= 1e-7 ) exit
     t = t + h
     y0 = y
     Pr(j) = y
  end do

















contains

  !---------------------------------------------------------------------!
  !                                                                     !
  !                            TOV Equations                            !
  !                                                                     !
  !---------------------------------------------------------------------!

  function dPdr(r,P)
    use kinds
    implicit none 

    real(DP),intent(in)  :: r,P
    real(DP)             :: dPdr

    real(DP)             :: mass

    RhoIn = splinevals(splc,Pvals,P)
    mass = integral(dmdr,0.001_DP,r,absErr,relErr)
    if ( mass .eq. 0 ) mass = 0.001_DP
    dPdr = -(mass*RhoIn/(r**2))*&
         &(( (1+P/RhoIn)*(1+4*pi*(r**3)*P/mass))/&
         & (1-2*mass/r))

  end function dPdr

  function dmdr(r)
    use kinds
    implicit none 

    real(DP),intent(in)  :: r
    real(DP)             :: dmdr

    dmdr = 4*pi*(r**2)*RhoIn

  end function dmdr

  !---------------------------------------------------------------------!
  !                                                                     !
  !                          Equation of state                          !
  !                                                                     !
  !---------------------------------------------------------------------!

  function P(eps)
    use kinds
    implicit none

    real(DP),intent(in) :: eps
    real(DP)            :: P

    P   = (N1*(eps**(p1))/(1+exp((eps-r)/a)))&
         &+(N2*(eps**(p2))/(1+exp(-(eps-r)/a)))

  end function P

  !---------------------------------------------------------------------!
  !                                                                     !
  !                          Crust calculation                          !
  !                                                                     !
  !---------------------------------------------------------------------!

  subroutine calccrust()

    open(100,file="theo_data",action="read",status="old",form="formatted")
    do i=1,L
       read(100,*) crust_t(i),crust_y(i),empty
    end do
    crust(1:L,1) = (crust_t(1:L)/conv1)*conv2  ! MeV/fm^3
    crust(1:L,2) = (crust_y(1:L)/conv3)*conv2  ! MeV/fm^3

  end subroutine calccrust

end program QMC_2018V2
